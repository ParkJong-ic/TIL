연산자

+= : 왼쪽 변수에 더하면서 대입한다.
-= : 왼쪽 변수에 빼면서 대입한다.
*= : 왼쪽 변수에 곱하면서 대입한다.
/= : 왼쪽 변수에 나누면서 대입한다.
%= : 왼쪽 변수에  나머지 값을 구하면서 대입한다.
&& : 그리고(and)
||(shift + enter 윗부분) : 또는(or)
!= : 같지 않다.

1. integer.parselnt(x) : 매개변수로 객체를 필요로 할 때, 기본형 값이 아닌 객체로 저장해야할 때, 객체 간 비교가 필요할 때
   ex) String s = "102";
        Integer.parseInt(s) = 102  -> 문자열 안의 숫자를 숫자로 변환하는 함수

2. size() : 컬렉션프레임워크(ArrayList, Set..등) 타입의 길이를 알고자 할때 사용된다.
   ex) ArrayList<Object> test = new ArrayList<Object>();
        System.out.println(test.size()); //0

3. ArrayList() -> 기본 생성지, ArrayList(Collection c) -> Collection들끼리 변환할 때 사용
   ArrayList(int initialCapacity) -> 배열의 길이를 정해줌(내가 저장하려고 하는 객체의 개수만큼 배열의 길이를 정해줌
   추가, 삭제가 가능하므로 넉넉하게 정해주면 좋음,
   그렇지 않으면 공간이 부족 할 때마다 새로 다시 만들고 복사해야 되고 하는 과정을 거쳐야 되기 때문에 성능이 떨어짐)

   boolean add(Object o) : 추가하는 메소드
   ex) list.add(new Integer(a);[a는 숫자] = list.add(a); -> 리스트에는 객체배열이라 객체만 저장가능하지만 컴파일러가 autoboxing을 해줌

   void add(int index, Object element) : 그냥 추가하면 맨 뒤에 저장이 되는데 이 메소드를 사용하면 원하는 위치에 저장이 가능함
   ex) list[0, 2, 4, B, C] 일 때 list.add(3, "A"); 를 추가하면 -> list[0, 2, 4, A, B, C] 로 변함

   boolean addAll(Collection c) : Collection이 가지고 있는 요소를 그대로 저장
   boolean addAll(int index, Collection c) : Collection이 가지고 있는 요소를 원하는 위치에 그대로 저장

   boolean remove(Object o) : 삭제하는 메소드
   Object remove(int index) : 특정위치에 요소를 삭제하는 메소드
   ex) list.add(0, "1");을 해서 list 첫 번째에 문자열 1을 추가하고 나머지 값이 Intrger일 경우, list[1, 0, 1, 2, 3] 이라면
        list.remove(1); -> 인덱스가 1인 객체를 삭제 -> list[1, 1, 2, 3], list.remove(new Intrger(1)); -> 문자열 1을 삭제 -> list[1, 1, 2, 3]

   boolean removeAll(Collection c) : Collection에 있는 메소드를 삭제
   void clear() : ArrayList에 있는 모든 객체를 삭제

   int indexOf(Object o) : 객체가 몇 번째에 저장되어있는지 찾는 것, 왼쪽부터 오른쪽순으로 찾음(못찾으면 -1을 반환)
   ex) list.add(0, "1");을 해서 list 첫 번째에 문자열 1을 추가하고 나머지 값이 Intrger일 경우, list[1, 0, 1, 2, 3] 이라면
        System.out.println(list.indexOf(0); -> 0번째 문자열 1이 출력, System.out.println(list.indexOf(2) -> 2번째 숫자열 1이 출력

   int lastlndexOf(Object o) : 객체가 몇 번째에 저장되어있는지 찾는 것, 오른쪽부터 왼쪽순으로 찾음(못찾으면 -1을 반환)
   boolean contains(Object o) : 지정된 객체가 있는지(있으면 ture, 없으면 flase)
   ex) for(int i = list1.size()-1; i >= 0; i--) { if(lsit1.contains(list2.get(i))) list2.remove(i); } print(list1, list2);
        -> list1에서 list2에 있는 것들을 차례로 삭제
   object get(int index) : 특정 위치의 객체 반환
   object set(int index, Object element) : index에 있는 객체를 element로 변경
   ex) list[0, 2, 4, A, B, C] 일 때, list.set(3, "AA") 를 추가하면 -> list[0, 2, 4, AA, B, C] 로 변함

   List subList(int fromlndex, int tolndex) : from ~ to 사이의 객체를 뽑아서 새로운 리스트를 만듬
   ex) ArrayList list = new ArrayList(list.subList(1,4)); -> 1<=x<4 뒤에는 등호가 없기 때문에 뒤는 안 들어감, 읽기전용

   Object[] toArray() : Array List의 객체 배열을 반환
   Object[] toArray(Object[] a) : 유튜브에서 설명은 안 해줌
   boolean isEmpty() : 비어있는지 확인
   void trimToSize() : 빈공간 제거
   int size() : ArrayList 저장된 객체의 갯수를 반환

   Collections.sort(list) : list를 오름차순으로 정렬한다.(Collection은 인터페이스, Collections는 유틸 클래스) -> 사용시 위에 import java.util.Collections; 추가
   ex) Collections.sort(list1);
        Collections.sort(list2);
        print(list1, list2); -> list1 : [0, 1, 2, 3, 4, 5], list2 : [0 ,2 ,4]
        System.out.println("list1.containsAll(list2) :" -> list1.containsAll(list2) : true -> list2에 요소가 list1에 다 있는지 확인

   자바에서 ArrayList를 사용시 옆에 구문을 먼저 추가 (import java.util.ArrayList;)
   ex) ArrayList<Integer> integers1 = new ArrayList<Integer>(); // 타입 지정
        ArrayList<Integer> integers2 = new ArrayList<>(); // 타입 생략 가능
        ArrayList<Integer> integers3 = new ArrayList<>(10); // 초기 용량(Capacity) 설정
        ArrayList<Integer> integers4 = new ArrayList<>(integers1); // 다른 Collection값으로 초기화
        ArrayList<Integer> integers5 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5)); // Arrays.asList()

   14문제 ArrayList -> Array 로 변환 방법(ArrayList와 Array는 자료구조가 다름)
   ArrayList = ADT : 구조의 속성과 행위를 설명(What : o, How : x), Array = 연속적인 메모리에서 같은 종류의 아이템들을 저장 할 수 있는 자료구조
   ( ※ 두 가지가 자료구조가 다르다는 부분은 이해가 가지만 아직 이해가 잘 안 됨)
   1) toArray()
           ex) List<Integer> list = new ArrayList<>();
                Object[] arr = list.toArray();
           List 클래스의 인스턴스 메서드인 toArray()는 Object 타입의 배열을 반환한다.
           타입 변환이 자동으로 이루어지지 않아서 리턴 배열을 활용하기 번거롭다.
   2) toArray(T[] a)
           ex) List<Integer> list = new ArrayList<>();
                Integer[] arr = list.toArray(new Integer[0]);
           toArray(T[] a)는 T 타입 배열을 반환한다.
           T는 값 타입이 될 수 없기 때문에 int, double, float와 같은 타입의 배열은 이 방법으로는 얻을 수 없다.
           파라미터 a의 길이는 0으로 지정하면 알아서 list의 길이에 맞게 조정되어 arr에 저장된다.
   3) stream
           ex) List<Integer> list = new ArrayList<>();
                int[] arr = list.stream().mapToInt(Integer::intValue).toArray();
           값타입 배열을 얻기 위해서는 int 값을 꺼내서 배열로 저장해야 한다. 이 때 사용하는 것이 stream이다.
           list.stream(): Stream<Integer>을 반환한다.
           mapToInt(Integer::intValue): Integer의 intValue() 메서드를 참조해서 값타입인 int로 언박싱한다.
           toArray(): IntStream의 원소를 배열로 변환한다.
   Array -> ArrayList 로 변환
   1)  


4. toUpperCase : 대문자를 소문자로 변경해주는 것

알고리즘문제 1번 부터 15번까지 정답 보면서 다시 풀어보기 궁금한 부분
1. print와 println -> println은 print에서 |n(한줄 띄워주기)를 포함한 메소드이다.
2. Integer.parseInt -> 문자열 안의 숫자를 숫자로 변환하는 함수
3. ArrayList -> 위에 정리






