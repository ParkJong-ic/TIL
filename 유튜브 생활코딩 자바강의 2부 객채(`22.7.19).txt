클래스 - 설계도, 인스턴스 - 제품, 객체 - object

프로그램의 중요한 원칙 - 중복의 제거

메소드가 도입되면서 유지 및 보수의 편의성, 가독성이 높아졌다.



객체는 독립된 프로그램으로 볼 필요가 있다.

1. 클래스 변수(Static Field)
   모든 인스턴스에 동일하게 적용하는 변수
   이유 - 1. 인스턴스에 따라서 변하지 않는 값이 필요한 경우
            2. 인스턴트를 생성할 필요가 없는 값을 클래스에 저장하고 싶은 경우
            3. 값의 변경 사항을 모든 인스턴스가 공유해야 하는 경우

2. 인스턴스의 변수(Non-Static Field)
   인스턴스 별로 다르게 적용되는 변수

3. 유효범위(Scope)
   1) 변수를 선언한다는 것은 단순히 변수를 만든다 라고 하는 것을 넘어서서 그 변수의 유효범위를 정하는 행위
   2) 호출하는 메소드 안에 지역변수가 없다면 전역변수의 값을 가져오고 전역변수도 없다면 출력되지 않는다.
      (다른 지역변수를 가져오지 않는다.) -> 정적인 유효범위(static scope 또는 lexical scope)
      (다른 지역변수를 가져올 경우) -> 동적인 유효범위(dynamic scope) -> 근대적인 프로그램은 동적인 유효범위를 많이 쓴다.
   3) 변수 앞에 this. 를 붙일 경우 변수는 지역변수가 아니라 전역변수를 가져온다.
      ex) this.left(전역변수 left) = left(지역변수 left);

4. 전역변수(global variables) : 클래스의 직속변수, 지역변수(local variables) : 클래스 안 메소드 안에서 선언하는 변수

5. 상속(객체지향에서 상당히 중요한 내용)
   기존의 객체는 기능을 물려준다는 의미에서 부모 객체가 되고 새로운 객체는 기존 객체의 기능을 물려받는다는 의미에서
   자식 객체가 된다.
   부모 클래스(상위 클래스, super 클래스, 기초 클래스)
   자식 클래스(하위 클래스, sub 클래스, 유도 클래스)
   ex) class SubstractionableCalculator extends Calculator {  -> 이 부분을 추가하여 부모 클래스를 변경하지 않고 상속 받아
	pubilc void substract() {			       밑에 추가된 부분이 실행 될 수 있다.(extends를 쓴다.)
		System.out.println(this.left - this.right);
	}
}

        public class CalculatorDemo1 {

	public static void main(String[] args) {

		SubstractionableCalculator c1 = new SubstractionableCalculator();
		c1.setOprands(10, 20);
		c1.sum();
		c1.avg();
		c1.substract();   -->  추가된 부분
	}

   1] 필요한 이유
     1) 객체를 자신이 만들지 않았을 때
     2) 다양한 곳에서 사용이 될 때 메소드를 추가하면 다른 곳에서 문제가 발생 할 수 있다.

     장점
     1) 코드의 중복을 제거
     2) 유지, 보수가 편리하다
     3) 가독성이 높아진다
     
     부모 클래스에 기본 생성자가 없을 경우 오류가 발생 할 수 있다.
      -> 상위 클래스에 기본 생성자를 생성 or 하위 클래스에 super를 생성하여 하위 클래스가 상위 클래스를 참조
          ex) super(left, right);
        부모클래스를 의미(super)

   2] overriding(창의적인 상속) :
     부모 클래스도 가지고 있고 자식 클래스도 가지고 있는 메소드를 재정의해서 부모 클래스의 메소드를 무시를 하고
     자식 클래스에 있는 메소드를 실행
     
     조건(메소드의 서명)
     1) 메소드의 이름
     2) 메소드 매개변수의 숫자와 데이터 타입 그리고 순서
     3) 메소드의 리턴 타입

     ex) public int avg() {				부모
	return ((this.left + this.right) / 2);		메소드
	}

          public int avg() {				public int avg() {		자식
	return ((this.left + this.right) / 2);	->	return (super.avg());	메소드
	}					}

   3] overloading :
     2개의 값에 대한 연산 만을 수행 할 수 있는데 3개의 값을 대상으로 연산 해야 할 때 사용
     같은 이름 다른 매개변수로 overloading이 가능해진다.
     (자바 입장에서 매개변수의 숫나나 매개변수의 타입이 다르다면 다른 메소드로 인식)

    규칙
    공통점 : 메소드의 이름, 리턴값, 차이점 : 매개변수 (매개변수의 이름이 다른 것은 상관이 없다.)
